#!/usr/bin/env bash

function print() # (message)
{
	local message=$1
	length=${#message}

	printf '%s\n' $(printf '#%.0s' $(seq 1 $((length+4))))
	printf '# %s #\n' "$1"
	printf '%s\n' $(printf '#%.0s' $(seq 1 $((length+4))))
}

function file_analysis() # ($file, $enabled, $extension) => ()
{
	if [[ $2 == 1 ]]; then
		if [[ ! -f "./target/$3/$3$localtime.log" ]]; then
			## create log file
			logfile="./target/$3"

			if [[ ! -d "$logfile" ]]
			then
				mkdir -p "$logfile"
			fi
			logfile="$logfile"/$3"$localtime".log

			if [[ ! -f "$logfile" ]]
			then
				touch "$logfile"
			fi
		fi
		logfile=".target/$3/$3$localtime.log"
		case "$3" in
			perl)
				syntax_check=$( perl -cw $1 2>&1 )

				echo "" >> "$logfile" && echo "$syntax_check" >> "$logfile"
				if [[ $syntax_check != "$1 syntax OK" ]]; then
					print "$1 had syntax errors. Check log file"
					return 1
				fi

			## Import
			if [[ "$( which perlimports >> /dev/null )" ]]; then
				perlimports --filename "$1" >> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting imports. Check log file"
					return 1
				fi
			fi

			### Format
			if [[ "$( which perltidy >> /dev/null )" ]]; then
				perltidy "$1" >> "$1.tdy" 2>> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting. Check log file"
					return 1
				fi
				mv "$1.tdy" "$1"
			fi

			### Lint
			if [[ "$( which perlcritic >> /dev/null )" ]]; then
				perlcritic "$1" >> $logfile
				if [[ $? != 0 ]]; then
					print "$1 did not pass PERLCRITIC configuration. Check log file"
					return 1
				fi
			fi
			;;
		python)
			### Format
			if [[ "$(which autopep8 >> /dev/null)" ]]; then
				autopep8 "$1" >> "$1" 2>> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting. Check log file"
					return 1
				fi
			fi

			### Lint
			if [[ "$(which pylint >> /dev/null)" ]]; then
				pylint "$1" >> $logfile 2>> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 did not pass PyLint configuration. Check log file"
					return 1
				fi
			fi
			;;
		c|cpp)
			# Format
			if [[ "$(which clang-format >> /dev/null)" ]]; then
				clang-format --style=file --fallback-style=LLVM -i "$1" >> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting. Check log file"
					return 1
				fi
			fi

			# Lint
			if [[ "$(which clang-tidy >> /dev/null)" ]]; then
				clang-tidy --config-file=.clang-tidy "$1" >> "$logfile" 2>&1
				if [[ $? != 0 ]]; then
					print "$1 did not pass CLANG-TIDY configuration. Check log file"
					return 1
				fi
			fi
			;;
		java)
			## Format
			if [[ "$(which clang-format >> /dev/null)" ]]; then
				clang-format --style=file --fallback-style=Google -i "$1" >> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting. Check log file"
					return 1
				fi
			fi

			## Lint
			java -jar checkstyle.jar --debug -c ./google_checks.xml  "$1" >> "$logfile"
			if [[ $? != 0 ]]; then
				print "$1 did not pass CHECKSTYLE configuration. Check log file"
				return 1
			fi
			;;
		javascript)
			## Format
			if [[ "$(which clang-format >> /dev/null)" ]]; then
				clang-format --style=file --fallback-style=Google -i "$1" >> "$logfile"
				if [[ $? != 0 ]]; then
					print "$1 had errors on formatting. Check log file"
					return 1
				fi
			fi
			;;

			## Lint
		esac
	fi
	print "$1 had no errors"

	return 0
}

## If an error was found
errors=0

localtime=$(date '+%Y%m%d%H%M%S')
modifiedfiles=($(git diff --cached --name-only --diff-filter=d))

## Add file types, extensions or certain filenames to be ignored during the check
exceptionfiles=()
logfile=""

## Move to root folder
initial_dir=$(pwd)
while [[ ! -d "$PWD/.git" ]]; do
	cd ..
done

### analyce all commited files
for file in "${modifiedfiles[@]}"; do

	print "Checking file $file"
	case "$(file -b --mime-type $file)" in
		*java)
			file_analysis "$file" "0" "java"
			;;
		*javascript)
			file_analysis "$file" "0" "javascript"
			;;
		*perl)
			file_analysis "$file" "0" "perl"
			;;
		*python)
			file_analysis "$file" "0" "python"
			;;
		*x-c)
			case "${file##*.}" in
				cpp)
					file_analysis "$file" "0" "cpp"
					;;
				c)

					file_analysis "$file" "0" "c"
					;;
				*)
					print "$file had no errors"
					continue
					;;
			esac
			;;
		*)
			case "${file##*.}" in
				pl|pm)
					file_analysis "$file" "0" "perl"
					;;
				java)
					file_analysis "$file" "0" "java"
					;;
				py)
					file_analysis "$file" "0" "python"
					;;
				js)
					file_analysis "$file" "0" "javascript"
					;;
				*)
					print "$file had no errors"
					continue
					;;
			esac
			;;
	esac

	[[ $? == 1 && $errors == 0 ]] && errors=1 && continue

	## Add to git stash
	git add "$file"
done

if [[ $errors == 1 ]]; then

	echo ""
	echo "#################WARNINGS####################"
	echo "#       Check log files at ./target/* 	  #"
	echo "#############################################"
	echo ""

	exit 1
fi

## Return to origin folder
cd "$initial_dir"

exit 0
